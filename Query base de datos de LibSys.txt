Drop database Biblioteca;

Create database Biblioteca;

use Biblioteca;

create table Libro (
	ID INT PRIMARY KEY AUTO_INCREMENT,
    TituloLibro VARCHAR(50),
    Editorial VARCHAR(50),
    Autor VARCHAR(50),
    Fecha date,
    CampoEstudio VARCHAR(50),
    Cantidad int
);
create table Estudiante (
	Cedula INT PRIMARY KEY AUTO_INCREMENT,
    NombreCompleto VARCHAR(50),
    Carrera VARCHAR(30),
    Correo VARCHAR(50),
    Numero VARCHAR(10)
);
create table Usuarios (
	Id INT PRIMARY KEY AUTO_INCREMENT,
    NombreUsuario VARCHAR(50) unique,
    Contrasena VARCHAR(50)
);
create table Prestamos (
	ID INT PRIMARY KEY AUTO_INCREMENT,
    LibroId Int,
    EstudianteId Int,
    FechaPrestamo date,
    FechaLimite date,
    FechaDevolucion date,
    EstadoPrestado boolean,
    FOREIGN KEY (LibroId) REFERENCES Libro(ID),
    FOREIGN KEY (EstudianteId) REFERENCES Estudiante(Cedula)
);

CREATE VIEW VistaPrestamos AS
SELECT
	P.ID,
    E.NombreCompleto AS NombreEstudiante,
    E.Carrera,
    E.Correo,
    L.TituloLibro AS NombreLibro,
    P.FechaPrestamo,
    P.FechaLimite
FROM Prestamos P
JOIN Estudiante E ON P.EstudianteId = E.Cedula
JOIN Libro L ON P.LibroId = L.ID
WHERE P.EstadoPrestado = 1;

CREATE VIEW VistaHistorial AS
SELECT
	P.ID,
    E.NombreCompleto AS NombreEstudiante,
    E.Carrera,
    E.Correo,
    L.TituloLibro AS NombreLibro,
    P.FechaPrestamo,
    P.FechaDevolucion
FROM Prestamos P
JOIN Estudiante E ON P.EstudianteId = E.Cedula
JOIN Libro L ON P.LibroId = L.ID;

DELIMITER //

CREATE PROCEDURE RegistrarPrestamo(
    IN p_cedula INT,
    IN p_NombreCompleto VARCHAR(50), 
    IN p_Carrera VARCHAR(30),
	IN p_Correo VARCHAR(50), 
    IN p_Numero VARCHAR(10),
    IN p_tituloLibro VARCHAR(50)
)
BEGIN
    DECLARE v_estudianteRegistrado INT;
    DECLARE v_cantidadLibro INT;
    DECLARE v_fechaPrestamo DATE;
    DECLARE v_fechaLimite DATE;

    -- Verificar si el estudiante está registrado
    SELECT COUNT(*) INTO v_estudianteRegistrado
    FROM Estudiante
    WHERE Cedula = p_cedula;

    IF v_estudianteRegistrado = 0 THEN
        -- El estudiante no está registrado, así que lo registramos
        INSERT INTO Estudiante (Cedula, NombreCompleto, Carrera, Correo, Numero) 
        VALUES (p_cedula, p_NombreCompleto, p_Carrera, p_Correo, p_Numero);
    END IF;

    -- Obtener la cantidad de libros disponibles
    SELECT Cantidad INTO v_cantidadLibro
    FROM Libro
    WHERE TituloLibro = p_tituloLibro;

    IF v_cantidadLibro > 1 THEN
		-- restamos uno a la cantidad de libros disponibles
		UPDATE Libro
		SET Cantidad = v_cantidadLibro - 1
		WHERE TituloLibro = p_tituloLibro;
        -- Crear un registro en la tabla de préstamos
        SET v_fechaPrestamo = CURDATE();
        IF MONTH(CURDATE()) < 6 THEN
            SET v_fechaLimite = DATE_FORMAT(CURDATE(), '%Y-06-01');
        ELSE
            SET v_fechaLimite = DATE_FORMAT(CURDATE(), '%Y-11-15');
        END IF;

        INSERT INTO Prestamos (LibroId, EstudianteId, FechaPrestamo, FechaLimite, EstadoPrestado)
        VALUES (
            (SELECT ID FROM Libro WHERE TituloLibro = p_tituloLibro),
            p_cedula,
            v_fechaPrestamo,
            v_fechaLimite,
            1
        );
    END IF;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE InsertarLibro(
    IN p_TituloLibro VARCHAR(50),
    IN p_Editorial VARCHAR(50),
    IN p_Autor VARCHAR(50),
    IN p_Fecha date,
    IN p_CampoEstudio VARCHAR(50),
    IN p_Cantidad int)
BEGIN
    INSERT INTO Libro (TituloLibro, Editorial,Autor, Fecha, CampoEstudio, Cantidad) 
    VALUES (p_TituloLibro, p_Editorial, p_Autor, p_Fecha, p_CampoEstudio, p_Cantidad);
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE ActualizarEstado(
    IN p_prestamoId INT
)
BEGIN
	UPDATE Prestamos
	SET EstadoPrestado = 0, FechaDevolucion = CURDATE()
	WHERE ID = p_prestamoId;
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER AumentarCantidadLibros
AFTER UPDATE ON Prestamos
FOR EACH ROW
BEGIN
    DECLARE v_libroId INT;
    DECLARE v_cantidadLibro INT;

    -- Obtener el ID del libro afectado por el préstamo
    SET v_libroId = NEW.LibroId;

    -- Obtener la cantidad actual de libros
    SELECT Cantidad INTO v_cantidadLibro
    FROM Libro
    WHERE ID = v_libroId;

    -- Actualizar la cantidad sumando 1 si el estado cambió a prestado
    IF NEW.EstadoPrestado = 0 THEN
        UPDATE Libro
        SET Cantidad = v_cantidadLibro + 1
        WHERE ID = v_libroId;
    END IF;
END //

DELIMITER ;

DELIMITER //
CREATE PROCEDURE ValidateUser(IN p_NombreUsuario VARCHAR(50), IN p_Contrasena VARCHAR(50))
BEGIN
    DECLARE v_exists INT;

    SELECT COUNT(*) INTO v_exists
    FROM Usuarios
    WHERE NombreUsuario = p_NombreUsuario AND Contrasena = p_Contrasena;

    IF v_exists = 1 THEN
        SELECT TRUE AS 'Resultado';
    ELSE
        SELECT FALSE AS 'Resultado';
    END IF;
END //
DELIMITER ;

insert into Usuarios (NombreUsuario, contrasena)
values ("BibliotecaRemington", "uniremingtonBiblioteca1"),
		("Admin", "control!@#$");
 