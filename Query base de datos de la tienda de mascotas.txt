create database tiendamascotas;

use tiendamascotas;

CREATE TABLE Usuarios (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    rol ENUM('administrador', 'cliente') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    categoria VARCHAR(50),
    precio DECIMAL(10, 2) NOT NULL,
    imagen_url VARCHAR(255),
    stock INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE Carritos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    usuario_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(id) ON DELETE CASCADE
);

CREATE TABLE Carrito_Productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    carrito_id INT NOT NULL,
    producto_id INT NOT NULL,
    cantidad INT NOT NULL DEFAULT 1,
    FOREIGN KEY (carrito_id) REFERENCES Carritos(id) ON DELETE CASCADE,
    FOREIGN KEY (producto_id) REFERENCES Productos(id) ON DELETE CASCADE
);

CREATE TABLE Pedidos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    usuario_id INT NOT NULL,
    total DECIMAL(10, 2) NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado ENUM('En proceso', 'Enviado', 'Entregado', 'Cancelado') DEFAULT 'En proceso',
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(id) 
);

CREATE TABLE Pedido_Productos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    pedido_id INT NOT NULL,
    producto_id INT NOT NULL,
    cantidad INT NOT NULL,
    precio_unitario DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (pedido_id) REFERENCES Pedidos(id) ON DELETE CASCADE,
    FOREIGN KEY (producto_id) REFERENCES Productos(id)
);

CREATE TABLE Servicios (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    precio DECIMAL(10, 2) NOT NULL,
    duracion INT COMMENT 'DuraciÃ³n en minutos'
);

CREATE TABLE Reservas (
    id INT PRIMARY KEY AUTO_INCREMENT,
    usuario_id INT NOT NULL,
    servicio_id INT NOT NULL,
    fecha DATE NOT NULL,
    hora TIME NOT NULL,
    estado ENUM('pendiente', 'aprobado', 'cancelado') DEFAULT 'pendiente',
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (servicio_id) REFERENCES Servicios(id) 
);

CREATE TABLE Notificaciones (
    id INT PRIMARY KEY AUTO_INCREMENT,
    usuario_id INT NOT NULL,
    tipo VARCHAR(50),
    mensaje TEXT,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES Usuarios(id) ON DELETE CASCADE
);

-- crear usuarios, solo crea clientes, sera 1 solo administrador por defecto
DELIMITER //
CREATE PROCEDURE CrearUsuario(
    IN p_nombre VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_password VARCHAR(255)
)
BEGIN
    INSERT INTO Usuarios (nombre, email, password, rol, created_at)
    VALUES (p_nombre, p_email, p_password, 'cliente', CURRENT_TIMESTAMP);
END //
DELIMITER ;

-- funcion que valida el loggin si existe y retorna el rol y el id del usuario en un json
DELIMITER //
CREATE FUNCTION ValidarUsuario(
    p_email VARCHAR(100),
    p_password VARCHAR(255)
) RETURNS JSON
DETERMINISTIC
BEGIN
    DECLARE result JSON;
    
    SELECT JSON_OBJECT('id', u.id, 'rol', u.rol) INTO result
    FROM Usuarios u
    WHERE u.email = p_email AND u.password = p_password;
    
    RETURN result;
END //
DELIMITER ;


CREATE VIEW VistaPedidos AS
SELECT 
    p.id AS numero_pedido,
    pp.producto_id AS id_producto,
    prod.nombre AS nombre_producto,
    pp.cantidad,
    p.total AS total_pagado,
    p.fecha,
    p.estado
FROM 
    Pedidos p
JOIN 
    Pedido_Productos pp ON p.id = pp.pedido_id
JOIN 
    Productos prod ON pp.producto_id = prod.id;

DELIMITER //
CREATE PROCEDURE EditarEstadoPedido(
    IN p_pedido_id INT,
    IN p_nuevo_estado ENUM('En proceso', 'Enviado', 'Entregado', 'Cancelado')
)
BEGIN
    UPDATE Pedidos
    SET estado = p_nuevo_estado
    WHERE id = p_pedido_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ObtenerPedidosUsuario(
    IN p_usuario_id INT
)
BEGIN
    SELECT 
        p.id AS numero_pedido,
        pp.producto_id AS id_producto,
        prod.nombre AS nombre_producto,
        pp.cantidad,
        p.total AS total_pagado,
        p.fecha,
        p.estado
    FROM 
        Pedidos p
    JOIN 
        Pedido_Productos pp ON p.id = pp.pedido_id
    JOIN 
        Productos prod ON pp.producto_id = prod.id
    WHERE 
        p.usuario_id = p_usuario_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CrearReserva(
    IN p_usuario_id INT,
    IN p_servicio_id INT,
    IN p_fecha DATE,
    IN p_hora TIME
)
BEGIN
    INSERT INTO Reservas (usuario_id, servicio_id, fecha, hora, estado)
    VALUES (p_usuario_id, p_servicio_id, p_fecha, p_hora, 'pendiente');
END //
DELIMITER ;

CREATE VIEW VistaReservas AS
SELECT 
    u.nombre AS nombre_usuario,
    s.nombre AS nombre_servicio,
    r.fecha,
    r.hora,
    r.estado
FROM 
    Reservas r
JOIN 
    Usuarios u ON r.usuario_id = u.id
JOIN 
    Servicios s ON r.servicio_id = s.id;

DELIMITER //
CREATE PROCEDURE ObtenerReservasUsuario(
    IN p_usuario_id INT
)
BEGIN
    SELECT 
        s.nombre AS nombre_servicio,
        r.fecha,
        r.hora,
        r.estado
    FROM 
        Reservas r
    JOIN 
        Servicios s ON r.servicio_id = s.id
    WHERE 
        r.usuario_id = p_usuario_id;
END //
DELIMITER ;

CREATE VIEW ListaProductos AS
SELECT 
    id,
    nombre,
    descripcion,
    categoria,
    precio,
    imagen_url,
    stock,
    created_at,
    updated_at
FROM 
    Productos;

DELIMITER //
CREATE PROCEDURE CrearProducto(
    IN p_nombre VARCHAR(100),
    IN p_descripcion TEXT,
    IN p_categoria VARCHAR(50),
    IN p_precio DECIMAL(10, 2),
    IN p_imagen_url VARCHAR(255),
    IN p_stock INT
)
BEGIN
    INSERT INTO Productos (nombre, descripcion, categoria, precio, imagen_url, stock, created_at, updated_at)
    VALUES (p_nombre, p_descripcion, p_categoria, p_precio, p_imagen_url, p_stock, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ModificarProducto(
    IN p_id INT,
    IN p_nombre VARCHAR(100),
    IN p_descripcion TEXT,
    IN p_categoria VARCHAR(50),
    IN p_precio DECIMAL(10, 2),
    IN p_imagen_url VARCHAR(255),
    IN p_stock INT
)
BEGIN
    UPDATE Productos
    SET 
        nombre = p_nombre,
        descripcion = p_descripcion,
        categoria = p_categoria,
        precio = p_precio,
        imagen_url = p_imagen_url,
        stock = p_stock,
        updated_at = CURRENT_TIMESTAMP
    WHERE id = p_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE EliminarProducto(
    IN p_id INT
)
BEGIN
    DELETE FROM Productos
    WHERE id = p_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ObtenerProductoPorID(
    IN p_id INT
)
BEGIN
    SELECT 
        id,
        nombre,
        descripcion,
        categoria,
        precio,
        imagen_url,
        stock,
        created_at,
        updated_at
    FROM 
        Productos
    WHERE 
        id = p_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ObtenerProductosPorCategoria(
    IN p_categoria VARCHAR(50)
)
BEGIN
    IF p_categoria IS NULL THEN
        SELECT 
            id,
            nombre,
            descripcion,
            categoria,
            precio,
            imagen_url,
            stock
        FROM 
            Productos
        WHERE 
            stock > 0;
    ELSE
        SELECT 
            id,
            nombre,
            descripcion,
            categoria,
            precio,
            imagen_url,
            stock
        FROM 
            Productos
        WHERE 
            categoria = p_categoria AND stock > 0;
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CrearPedido(
    IN p_usuario_id INT,
    IN p_productos JSON
)
BEGIN
    DECLARE new_pedido_id INT;
    DECLARE total_pedido DECIMAL(10, 2) DEFAULT 0.00;
    DECLARE i INT DEFAULT 0;
    DECLARE producto_id INT;
    DECLARE cantidad INT;
    DECLARE precio_unitario DECIMAL(10, 2);
    DECLARE productos_count INT;

    -- Contar la cantidad de productos en el JSON
    SET productos_count = JSON_LENGTH(p_productos);

    -- Insertar el nuevo pedido en la tabla Pedidos con fecha actual y estado 'En proceso'
    INSERT INTO Pedidos (usuario_id, total, fecha, estado)
    VALUES (p_usuario_id, total_pedido, CURRENT_TIMESTAMP, 'En proceso');

    -- Obtener el ID del nuevo pedido insertado
    SET new_pedido_id = LAST_INSERT_ID();

    -- Bucle para insertar cada producto en Pedido_Productos y calcular el total
    WHILE i < productos_count DO
        SET producto_id = JSON_UNQUOTE(JSON_EXTRACT(p_productos, CONCAT('$[', i, '].producto_id')));
        SET cantidad = JSON_UNQUOTE(JSON_EXTRACT(p_productos, CONCAT('$[', i, '].cantidad')));

        SELECT precio INTO precio_unitario
        FROM Productos
        WHERE id = producto_id;

        INSERT INTO Pedido_Productos (pedido_id, producto_id, cantidad, precio_unitario)
        VALUES (new_pedido_id, producto_id, cantidad, precio_unitario);

        SET total_pedido = total_pedido + (cantidad * precio_unitario);

        SET i = i + 1;
    END WHILE;

    -- Actualizar el total del pedido en la tabla Pedidos
    UPDATE Pedidos
    SET total = total_pedido
    WHERE id = new_pedido_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ObtenerPedidoProductosPorID(
    IN p_pedido_id INT
)
BEGIN
    SELECT 
        id,
        pedido_id,
        producto_id,
        cantidad,
        precio_unitario
    FROM 
        Pedido_Productos
    WHERE 
        pedido_id = p_pedido_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE AgregarProductoAlCarrito(
    IN p_usuario_id INT,
    IN p_producto_id INT,
    IN p_cantidad INT
)
BEGIN
    DECLARE carrito_id INT;

    -- Verificar si el usuario ya tiene un carrito
    SELECT id INTO carrito_id 
    FROM Carritos 
    WHERE usuario_id = p_usuario_id;

    -- Si no tiene un carrito, crear uno nuevo
    IF carrito_id IS NULL THEN
        INSERT INTO Carritos (usuario_id)
        VALUES (p_usuario_id);
        SET carrito_id = LAST_INSERT_ID();
    END IF;

    -- Agregar el producto al carrito
    INSERT INTO Carrito_Productos (carrito_id, producto_id, cantidad)
    VALUES (carrito_id, p_producto_id, p_cantidad);
END //
DELIMITER ;

DELIMITER //

CREATE TRIGGER EliminarCarritoDespuesDePedido
AFTER INSERT ON Pedidos
FOR EACH ROW
BEGIN
    DELETE FROM Carrito_Productos
    WHERE carrito_id IN (SELECT id FROM Carritos WHERE usuario_id = NEW.usuario_id);
    
    DELETE FROM Carritos
    WHERE usuario_id = NEW.usuario_id;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER ActualizarStockDespuesDePedido
AFTER INSERT ON Pedido_Productos
FOR EACH ROW
BEGIN
    UPDATE Productos
    SET stock = stock - NEW.cantidad
    WHERE id = NEW.producto_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CancelarReserva(
    IN p_reserva_id INT
)
BEGIN
    UPDATE Reservas
    SET estado = 'cancelado'
    WHERE id = p_reserva_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ObtenerProductosCarrito(IN p_usuario_id INT)
BEGIN
    SELECT 
        p.id AS producto_id,
        p.nombre AS nombre_producto,
        p.descripcion,
        p.categoria,
        p.precio,
        cp.cantidad,
        (p.precio * cp.cantidad) AS total
    FROM 
        Carritos c
    JOIN 
        Carrito_Productos cp ON c.id = cp.carrito_id
    JOIN 
        Productos p ON cp.producto_id = p.id
    WHERE 
        c.usuario_id = p_usuario_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CrearAdmin(
    IN p_nombre VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_password VARCHAR(255)
)
BEGIN
    INSERT INTO Usuarios (nombre, email, password, rol, created_at)
    VALUES (p_nombre, p_email, p_password, 'administrador', CURRENT_TIMESTAMP);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE EliminarProductoDelCarrito(
    IN p_usuario_id INT,
    IN p_producto_id INT
)
BEGIN
    DELETE cp
    FROM Carrito_Productos cp
    JOIN Carritos c ON cp.carrito_id = c.id
    WHERE c.usuario_id = p_usuario_id AND cp.producto_id = p_producto_id;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE EditarEstadoReserva(
    IN p_reserva_id INT,
    IN p_nuevo_estado ENUM('pendiente', 'aprobado', 'cancelado')
)
BEGIN
    UPDATE Reservas
    SET estado = p_nuevo_estado
    WHERE id = p_reserva_id;
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER CrearPedidoDesdeReserva
AFTER UPDATE ON Reservas
FOR EACH ROW
BEGIN
    DECLARE nuevo_pedido_id INT;
    DECLARE precio_servicio DECIMAL(10, 2);

    -- solo crea el pedido si el estado cambia a aprobado
    IF NEW.estado = 'aprobado' THEN
        -- Obtener el precio del servicio asociado a la reserva
        SELECT precio INTO precio_servicio
        FROM Servicios
        WHERE id = NEW.servicio_id;

        INSERT INTO Pedidos (usuario_id, total, fecha, estado)
        VALUES (NEW.usuario_id, precio_servicio, CURRENT_TIMESTAMP, 'En proceso');

        SET nuevo_pedido_id = LAST_INSERT_ID();

        -- Insertar el servicio como producto en la tabla Pedido_Productos
        INSERT INTO Pedido_Productos (pedido_id, producto_id, cantidad, precio_unitario)
        VALUES (nuevo_pedido_id, NEW.servicio_id, 1, precio_servicio);
    END IF;
END //
DELIMITER ;

INSERT INTO Servicios (nombre, descripcion, precio, duracion) VALUES
('BaÃ±o y Cepillado', 'Servicio completo de baÃ±o y cepillado para mantener a tu mascota limpia y presentable.', 30.00, 60),
('Corte de Pelo', 'Corte de pelo profesional para todas las razas de perros y gatos.', 40.00, 90),
('Corte de UÃ±as', 'Corte de uÃ±as para evitar daÃ±os y mantener la salud de las patas.', 15.00, 20),
('Limpieza de OÃ­dos', 'Limpieza profunda de oÃ­dos para evitar infecciones y mantener la salud auditiva.', 20.00, 30),
('DesparasitaciÃ³n', 'DesparasitaciÃ³n interna y externa para proteger a tu mascota de parÃ¡sitos.', 25.00, 15),
('Consulta Veterinaria', 'Consulta con un veterinario para chequeo general y asesoramiento sobre la salud de tu mascota.', 50.00, 45),
('VacunaciÃ³n', 'AplicaciÃ³n de vacunas para prevenir enfermedades comunes en mascotas.', 35.00, 20),
('Adiestramiento BÃ¡sico', 'Sesiones de adiestramiento bÃ¡sico para mejorar la obediencia y el comportamiento.', 50.00, 60),
('Adiestramiento Avanzado', 'Sesiones de adiestramiento avanzado para habilidades especÃ­ficas y comportamientos complejos.', 70.00, 90),
('GuarderÃ­a', 'Servicio de cuidado durante el dÃ­a para que tu mascota se divierta y socialice.', 25.00, 480);